import six
import sys
sys.modules['sklearn.externals.six'] = six
from Route_Computation import mltulip
from Route_Computation import mlrose
from map_sorter import util
# import mlrose
import numpy as np
import time

    # f√ºr 2.1

POP_SIZE = 300
MUTATION_PROB = 0.02
MAX_ATTEMPTS = 200
MAX_ITERS = np.inf
MAXIMIZE = False

def main():
    startTime = time.time()
    # Create list of distances between pairs of cities
    dist_list = [[0, 1, 1132], [0, 2, 2163], [0, 3, 2207], [0, 4, 2055], [0, 5, 2081], [0, 6, 1007], [0, 7, 2419],
                 [0, 8, 1740], [0, 9, 2442], [0, 10, 1285], [0, 11, 1157], [0, 12, 2073], [0, 13, 1142], [0, 14, 2436],
                 [0, 15, 1722], [0, 16, 2032], [0, 17, 1963], [0, 18, 1119], [0, 19, 2258], [0, 20, 2236],
                 [0, 21, 2074], [0, 22, 2082], [0, 23, 1797], [0, 24, 1428], [10, 18, 406], [1, 17, 831], [1, 16, 900],
                 [1, 6, 346], [12, 19, 185], [16, 17, 182], [8, 19, 519], [17, 14, 637], [18, 15, 603], [7, 18, 1540],
                 [9, 2, 4028], [19, 21, 251], [1, 21, 942], [5, 14, 756], [8, 14, 697], [7, 14, 18], [24, 19, 830],
                 [3, 23, 724], [8, 13, 473], [20, 12, 112], [22, 23, 285], [16, 8, 292], [1, 8, 608], [7, 22, 739],
                 [23, 14, 953], [10, 12, 788], [10, 23, 512], [12, 2, 3660], [6, 16, 901], [3, 14, 562], [21, 23, 591],
                 [13, 5, 815], [20, 13, 969], [11, 23, 640], [18, 14, 1317], [11, 19, 1101], [3, 16, 289], [8, 9, 702],
                 [9, 14, 5], [1, 24, 296], [17, 5, 119], [22, 14, 756], [10, 6, 193], [16, 21, 156], [11, 3, 1050],
                 [6, 17, 831], [10, 21, 789], [2, 14, 3837], [6, 5, 950], [22, 8, 541], [10, 8, 455], [11, 5, 924],
                 [1, 11, 25], [20, 22, 556], [11, 18, 329], [8, 17, 411], [2, 13, 2325], [8, 5, 530], [2, 5, 3482],
                 [3, 6, 1076], [11, 16, 875], [24, 18, 549], [17, 2, 3549], [16, 4, 137], [2, 4, 3455], [10, 15, 437],
                 [21, 15, 515], [11, 15, 564], [19, 2, 3845], [22, 13, 816], [10, 3, 922], [6, 14, 1305], [13, 23, 531],
                 [8, 2, 3326], [9, 15, 883], [5, 23, 284], [18, 5, 963], [24, 23, 369], [20, 14, 475], [24, 15, 294],
                 [22, 21, 394], [6, 15, 590], [16, 15, 300], [9, 23, 958], [19, 9, 183], [20, 4, 94], [16, 2, 3609],
                 [24, 22, 654], [7, 6, 1287], [22, 18, 1203], [12, 4, 18], [5, 15, 360], [24, 2, 3015], [3, 9, 568],
                 [10, 5, 796], [7, 4, 364], [18, 6, 359], [22, 2, 3669], [5, 21, 393], [10, 7, 1134], [17, 4, 256],
                 [15, 23, 76], [24, 6, 297], [3, 18, 1328], [22, 15, 360], [24, 21, 646], [12, 6, 942], [10, 17, 678],
                 [7, 21, 412], [22, 6, 951], [11, 7, 1261], [11, 9, 1284], [10, 13, 58], [21, 14, 429], [15, 4, 496],
                 [20, 24, 808], [13, 15, 455], [23, 4, 572], [24, 8, 312], [21, 4, 48], [12, 13, 807], [10, 16, 747],
                 [18, 13, 224], [20, 2, 3823], [9, 5, 761], [16, 14, 518], [16, 23, 225], [12, 17, 274], [10, 24, 143],
                 [3, 22, 527], [12, 5, 393], [2, 23, 3198], [22, 16, 301], [20, 21, 50], [6, 23, 666], [22, 12, 394],
                 [11, 24, 271], [2, 21, 3474], [10, 4, 770], [19, 15, 699], [9, 21, 435], [20, 17, 437], [11, 12, 916],
                 [7, 17, 619], [12, 21, 66], [8, 23, 256], [12, 8, 334], [24, 12, 645], [6, 2, 2190], [3, 13, 941],
                 [16, 13, 756], [24, 13, 162], [8, 15, 181], [11, 20, 1078], [19, 13, 992], [17, 21, 275],
                 [10, 19, 973], [11, 21, 916], [3, 8, 467], [22, 4, 375], [20, 7, 457], [17, 9, 642], [1, 13, 211],
                 [24, 4, 627], [3, 15, 648], [9, 4, 387], [1, 19, 1126], [1, 9, 1310], [7, 9, 23], [7, 8, 679],
                 [20, 16, 318], [18, 9, 1323], [18, 19, 1139], [16, 5, 301], [20, 6, 1104], [7, 13, 1152],
                 [10, 9, 1157], [12, 23, 590], [7, 2, 4005], [19, 4, 203], [11, 6, 320], [13, 14, 1170], [22, 19, 578],
                 [10, 2, 2872], [20, 15, 677], [1, 20, 1104], [22, 9, 762], [18, 23, 678], [15, 14, 877], [16, 19, 340],
                 [22, 5, 1], [20, 9, 480], [24, 14, 1008], [20, 5, 555], [12, 14, 363], [18, 4, 936], [12, 15, 514],
                 [1, 3, 1075], [7, 23, 935], [24, 7, 991], [18, 8, 621], [1, 23, 665], [7, 15, 860], [1, 15, 590],
                 [10, 11, 445], [3, 7, 545], [3, 4, 181], [11, 22, 925], [1, 7, 1287], [22, 17, 119], [3, 17, 408],
                 [1, 4, 923], [5, 4, 375], [6, 13, 135], [1, 10, 153], [20, 18, 1357], [11, 13, 185], [6, 9, 1310],
                 [6, 21, 942], [16, 9, 524], [8, 4, 315], [12, 16, 155], [17, 15, 241], [11, 8, 582], [24, 9, 1014],
                 [2, 15, 3122], [17, 13, 696], [3, 24, 779], [10, 22, 797], [24, 17, 535], [8, 21, 334], [6, 4, 924],
                 [9, 13, 1175], [6, 8, 608], [19, 17, 459], [18, 2, 2833], [18, 17, 844], [3, 12, 200], [19, 14, 178],
                 [1, 5, 949], [24, 16, 604], [20, 19, 297], [18, 21, 955], [12, 9, 368], [19, 5, 578], [19, 23, 775],
                 [14, 4, 381], [11, 2, 2795], [11, 14, 1279], [1, 18, 354], [3, 19, 384], [7, 16, 501], [10, 14, 1151],
                 [1, 22, 950], [7, 12, 345], [20, 8, 496], [13, 4, 789], [1, 14, 1304], [3, 2, 3794], [1, 12, 941],
                 [13, 21, 807], [3, 5, 526], [3, 20, 136], [7, 19, 160], [18, 16, 913], [3, 21, 200], [7, 5, 738],
                 [6, 19, 1127], [17, 23, 165], [12, 18, 1195], [24, 5, 653], [1, 2, 2820], [11, 4, 898], [11, 17, 805],
                 [10, 20, 951], [20, 23, 753]]

    prio_list = {0: 0, 6: 0, 21: 0, 17: 0, 18: 0, 16: 1, 13: 0, 1: 0, 11: 0, 2: 0, 24: 0, 3: 0, 14: 0, 7: 0, 9: 0,
                 12: 0, 22: 0, 5: 0, 19: 0, 15: 0, 23: 0, 10: 0, 4: 0, 8: 0, 20: 0}

    #prio_list = {0: 0, 6: 0, 21: 0, 17: 0, 18: 0, 16: 0, 13: 0, 1: 0, 11: 0, 2: 0, 24: 0, 3: 0, 14: 0, 7: 0, 9: 0,
     #            12: 0, 22: 0, 5: 0, 19: 0, 15: 0, 23: 0, 10: 0, 4: 0, 8: 0, 20: 0}


    seed = 2

    curves = []


    print(seed)
    problem_fit = mltulip.TSPOpt(length=len(prio_list),
                                 maximize=MAXIMIZE,
                                 distances=dist_list,
                                 weights=prio_list)

    best_state, best_fitness, fitness_curve = mltulip.genetic_alg(problem_fit,
                                                                      pop_size=POP_SIZE,
                                                                      mutation_prob=MUTATION_PROB,
                                                                      max_attempts=MAX_ATTEMPTS,
                                                                      max_iters=MAX_ITERS, curve=True,
                                                                      random_state=seed)
    curves.append(fitness_curve)
    print(best_state)
    print(f"best fitness: {best_fitness}")
    #print(fitness_curve)
    print(f"number of iters: {len(fitness_curve)}")
    seed += 1

    executionTime = (time.time() - startTime)
    print('Execution time in seconds: ' + str(executionTime))


if __name__ == "__main__":
    main()